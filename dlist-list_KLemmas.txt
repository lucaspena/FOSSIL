(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (list x)))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (dlist (next x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (list (next x)) (list x)))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (and (list x) (dlist x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (and (list x) (list nil))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (and (list x) (dlist nil))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (list nil) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (dlist nil) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (list (next x)) (dlist (next x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (list (next (next x))) (list x)))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist (next (next x))) (list x)))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (and (list x) (list (next nil)))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (and (list x) (dlist (next nil)))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (and (list x) (list (prev nil)))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (and (list x) (dlist (prev nil)))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (and (dlist x) (dlist (next x)))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (list nil) (dlist (next x)))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (and (list nil) (dlist (next x)))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (dlist nil) (dlist (next x)))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (and (dlist nil) (dlist (next x)))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (list (next x)) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (list (prev x)) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (dlist (prev x)) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (list (next nil)) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (dlist (next nil)) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (list (prev nil)) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist x) (=> (dlist (prev nil)) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (list nil) (=> (list (next x)) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist nil) (=> (list (next x)) (list x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (list (next x)) (and (list x) (list nil))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (list (next x)) (and (list x) (dlist nil))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist (next (next x))) (dlist (next x))))
(define-fun lemma ((x Int) (nil Int)) Bool (=> (dlist (next (next (next x)))) (list x)))
