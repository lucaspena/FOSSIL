(set-logic ALL)

;; x = 0, ret = 1
;(declare-const x Int)
;(declare-const ret Int)
;(assert (= x 0))
;(assert (= ret 1))

;; combination of true models and false model
(define-fun next ((x!0 Int)) Int
  (ite (= x!0 75700) 75700
  (ite (= x!0 75701) 75702
  (ite (= x!0 75702) 75700
  (ite (= x!0 58700) 58701
  (ite (= x!0 58701) 58701
  (ite (= x!0 58702) 58702
  (ite (= x!0 65750) 65750
  (ite (= x!0 65751) 65751
  (ite (= x!0 65752) 65752
  (ite (= x!0 2000) 2000
  (ite (= x!0 2001) 2001
  (ite (= x!0 2002) 2001
  (ite (= x!0 107450) 107451
  (ite (= x!0 107451) 107451
  (ite (= x!0 107452) 107452
  (ite (= x!0 22650) 22651
  (ite (= x!0 22651) 22652
  (ite (= x!0 22652) 22652
  (ite (= x!0 43450) 43452
  (ite (= x!0 43451) 43451
  (ite (= x!0 43452) 43450
  (ite (= x!0 88550) 88550
  (ite (= x!0 88551) 88552
  (ite (= x!0 88552) 88551
  (ite (= x!0 36500) 36500
  (ite (= x!0 36501) 36500
  (ite (= x!0 36502) 36500
  (ite (= x!0 0) 0
  (ite (= x!0 1) 2
    109352))))))))))))))))))))))))))))))
(define-fun list ((x!0 Int)) Bool
  (ite (= x!0 58700) false
  (ite (= x!0 58701) false
  (ite (= x!0 65750) false
  (ite (= x!0 65752) false
  (ite (= x!0 2001) false
  (ite (= x!0 2002) false
  (ite (= x!0 107450) false
  (ite (= x!0 107451) false
  (ite (= x!0 43450) false
  (ite (= x!0 43452) false
  (ite (= x!0 88551) false
  (ite (= x!0 88552) false
  (ite (= x!0 1) false
    true))))))))))))))
(define-fun dlist ((x!0 Int)) Bool
  (or (= x!0 1) (= x!0 0)))
(define-fun prev ((x!0 Int)) Int
  (ite (= x!0 75700) 75700
  (ite (= x!0 75701) 75700
  (ite (= x!0 75702) 75701
  (ite (= x!0 58700) 58701
  (ite (= x!0 58701) 58700
  (ite (= x!0 58702) 58702
  (ite (= x!0 65750) 65750
  (ite (= x!0 65751) 65751
  (ite (= x!0 65752) 65750
  (ite (= x!0 2000) 2000
  (ite (= x!0 2001) 2001
  (ite (= x!0 2002) 2000
  (ite (= x!0 107450) 107452
  (ite (= x!0 107451) 107450
  (ite (= x!0 107452) 107452
  (ite (= x!0 22650) 22650
  (ite (= x!0 22651) 22652
  (ite (= x!0 22652) 22652
  (ite (= x!0 43450) 43451
  (ite (= x!0 43451) 43451
  (ite (= x!0 43452) 43451
  (ite (= x!0 88550) 88550
  (ite (= x!0 88551) 88552
  (ite (= x!0 88552) 88550
  (ite (= x!0 36500) 36500
  (ite (= x!0 36501) 36500
  (ite (= x!0 36502) 36500
  (ite (= x!0 0) 0
  (ite (= x!0 1) 0
    109352))))))))))))))))))))))))))))))

;; lemma to synthesize
;; TODO: must be generated from problem parameters

(synth-fun lemma ((x Int)(nil Int)) Bool

           ((Start Bool) (Rec Bool) (B Bool) (I Int))

           ((Start Bool
                  ((=> Rec B)))
           (Rec Bool
                  ((list I) (dlist I)))
           (B Bool
                  ((=> B B)
                   (and B B)
                   (or B B)
                   (not B)
                   (list I) (dlist I)))
            (I Int (x nil
                   (next I)
                   (prev I))))

)


;; Grammar for old version of code. Must be removed
;(synth-fun lemma ((x Int)) Bool
;
;           ((Start Bool) (Rec Bool) (B Bool) (I Int))
;
;           ((Start Bool
;                  ((=> Rec B)))
;           (Rec Bool
;                  ((list I) (dlist I)))
;           (B Bool
;                  ((=> B B)
;                   (and B B)
;                   (or B B)
;                   (not B)
;                   (list I) (dlist I)))
;            (I Int (x (- 1)
;                   (next I)
;                   (prev I))))
;
;)
;; constraints from false model
(constraint (or (not (lemma 0 0))
(not (lemma 1 0))
))

;; constraints from true models
(constraint (or (lemma 75700 75700)
(lemma 75701 75700)
(lemma 75702 75700)
))
(constraint (or (lemma 58700 58702)
(lemma 58701 58702)
(lemma 58702 58702)
))
(constraint (or (lemma 65750 65751)
(lemma 65751 65751)
(lemma 65752 65751)
))
(constraint (or (lemma 109350 109352)
(lemma 109351 109352)
(lemma 109352 109352)
))
(constraint (or (lemma 2000 2000)
(lemma 2001 2000)
(lemma 2002 2000)
))
(constraint (or (lemma 107450 107452)
(lemma 107451 107452)
(lemma 107452 107452)
))
(constraint (or (lemma 22650 22652)
(lemma 22651 22652)
(lemma 22652 22652)
))
(constraint (or (lemma 43450 43451)
(lemma 43451 43451)
(lemma 43452 43451)
))
(constraint (or (lemma 88550 88550)
(lemma 88551 88550)
(lemma 88552 88550)
))
(constraint (or (lemma 36500 36500)
(lemma 36501 36500)
(lemma 36502 36500)
))

(check-synth)