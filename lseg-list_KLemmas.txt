(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (lsegy x)))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (list x) (or (lsegy x) (list_p x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (list x) (=> (list_p y) (list_p x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (and (lsegy x) (list nil))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (or (lsegy x) (lsegy nil))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (and (lsegy x) (list_p nil))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (or (lsegy x) (lsegy_p nil))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (and (lsegy x) (lsegy y))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (and (lsegy x) (lsegy_p y))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (list nil) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (list_p nil) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (list y) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (lsegy y) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (list_p y) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (list_p y) (list_p x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (lsegy_p y) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (list y) (or (lsegy x) (list_p x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (list y) (=> (list_p y) (list_p x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (not (=> (lsegy x) (lsegy nil)))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (not (=> (lsegy x) (lsegy_p nil)))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (and (lsegy x) (list (next nil)))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (or (lsegy x) (lsegy (next nil)))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (and (lsegy x) (list_p (next nil)))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (or (lsegy x) (lsegy (next y)))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (list (next x)) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (list (next nil)) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (list_p (next nil)) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (list (next y)) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (lsegy_p x) (=> (list_p (next y)) (lsegy x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (list_p y) (=> (list (next x)) (list_p x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (list_p y) (=> (list_p (next x)) (list_p x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (list_p y) (=> (list_p (next y)) (list_p x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (list (next x)) (or (lsegy x) (list_p x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (list (next y)) (or (lsegy x) (list_p x))))
(define-fun lemma ((x Int) (nil Int) (y Int)) Bool (=> (list_p (next y)) (or (lsegy x) (list_p x))))
