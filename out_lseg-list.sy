(set-logic ALL)

;; x = 0, y = 1, z = 2
;(declare-const x Int)
;(declare-const y Int)
;(declare-const z Int)
;(assert (= x 0))
;(assert (= y 1))
;(assert (= z 2))

;; combination of true models and false model
(define-fun next ((x!0 Int)) Int
  (ite (= x!0 17150) 17150
  (ite (= x!0 17151) 17151
  (ite (= x!0 17152) 17150
  (ite (= x!0 9500) 9500
  (ite (= x!0 9501) 9500
  (ite (= x!0 9502) 9502
  (ite (= x!0 1050) 1050
  (ite (= x!0 1051) 1051
  (ite (= x!0 1052) 1052
  (ite (= x!0 400) 402
  (ite (= x!0 401) 401
  (ite (= x!0 402) 401
  (ite (= x!0 1) 1
  (ite (= x!0 0) 1
  (ite (= x!0 2) 4
  (ite (= x!0 4) 5
    13550)))))))))))))))))
(define-fun list ((x!0 Int)) Bool
  (ite (= x!0 17150) false
  (ite (= x!0 17152) false
  (ite (= x!0 9500) false
  (ite (= x!0 9501) false
  (ite (= x!0 1050) false
  (ite (= x!0 1052) false
  (ite (= x!0 2) false
  (ite (= x!0 4) false
    true)))))))))
(define-fun lsegy ((x!0 Int)) Bool
  (ite (= x!0 17151) false
  (ite (= x!0 9502) false
  (ite (= x!0 13550) false
  (ite (= x!0 13551) false
  (ite (= x!0 1051) false
  (ite (= x!0 1052) false
  (ite (= x!0 401) false
  (ite (= x!0 402) false
  (ite (= x!0 1) false
    true))))))))))
(define-fun list_p ((x!0 Int)) Bool
  (ite (= x!0 9500) false
  (ite (= x!0 9501) false
  (ite (= x!0 1052) false
  (ite (= x!0 400) false
  (ite (= x!0 0) false
  (ite (= x!0 2) false
  (ite (= x!0 4) false
    true))))))))
(define-fun next_p ((x!0 Int)) Int
  (ite (= x!0 17150) 17151
  (ite (= x!0 17151) 17151
  (ite (= x!0 17152) 17150
  (ite (= x!0 9500) 9501
  (ite (= x!0 9501) 9500
  (ite (= x!0 9502) 9502
  (ite (= x!0 1050) 1051
  (ite (= x!0 1051) 1051
  (ite (= x!0 1052) 1052
  (ite (= x!0 400) 400
  (ite (= x!0 401) 401
  (ite (= x!0 402) 401
  (ite (= x!0 1) 1
  (ite (= x!0 0) 3
  (ite (= x!0 2) 4
  (ite (= x!0 4) 5
    13550)))))))))))))))))
(define-fun lsegy_p ((x!0 Int)) Bool
  (or (= x!0 0)
      (= x!0 17150)
      (= x!0 17152)
      (= x!0 9500)
      (= x!0 9501)
      (= x!0 13552)
      (= x!0 1050)
      (= x!0 400)))

;; TODO: this should be generated from the problem parameters
;; lemma to synthesize
(synth-fun lemma ((x Int) (nil Int) (y Int)) Bool
           ((Start Bool) (Rec Bool) (B Bool) (I Int))

           ((Start Bool
                  ((=> Rec B)))
           (Rec Bool
                  ((list I) (lsegy I) (list_p I) (lsegy_p I)))
           (B Bool
                  ((=> B B)
                   (and B B)
                   (or B B)
                   (not B)
                   (list I) (lsegy I) (list_p I) (lsegy_p I)))
            (I Int (x nil y
                   (next I))))
)

;; constraints from false model
(constraint (or (not (lemma 1 1 0))
(not (lemma 0 1 0))
(not (lemma 2 1 0))
(not (lemma 4 1 0))
))

;; constraints from true models
(constraint (or (lemma 17150 17151 17150)
(lemma 17151 17151 17150)
(lemma 17152 17151 17150)
))
(constraint (or (lemma 9500 9502 9500)
(lemma 9501 9502 9500)
(lemma 9502 9502 9500)
))
(constraint (or (lemma 13550 13550 13552)
(lemma 13551 13550 13552)
(lemma 13552 13550 13552)
))
(constraint (or (lemma 1050 1051 1050)
(lemma 1051 1051 1050)
(lemma 1052 1051 1050)
))
(constraint (or (lemma 400 401 400)
(lemma 401 401 400)
(lemma 402 401 400)
))

(check-synth)