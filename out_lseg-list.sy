(set-logic ALL)

;; x = 0, y = 1, z = 2
;(declare-const x Int)
;(declare-const y Int)
;(declare-const z Int)
;(assert (= x 0))
;(assert (= y 1))
;(assert (= z 2))

;; combination of true models and false model
(define-fun next ((x!0 Int)) Int
  (ite (= x!0 20550) 20551
  (ite (= x!0 20551) 20552
  (ite (= x!0 20552) 20552
  (ite (= x!0 23850) 23850
  (ite (= x!0 23851) 23852
  (ite (= x!0 23852) 23852
  (ite (= x!0 1000) 1000
  (ite (= x!0 1001) 1001
  (ite (= x!0 1002) 1001
  (ite (= x!0 21450) 21451
  (ite (= x!0 21451) 21452
  (ite (= x!0 21452) 21452
  (ite (= x!0 17300) 17301
  (ite (= x!0 17301) 17301
  (ite (= x!0 17302) 17300
  (ite (= x!0 8250) 8250
  (ite (= x!0 8251) 8251
  (ite (= x!0 8252) 8252
  (ite (= x!0 20050) 20050
  (ite (= x!0 20051) 20051
  (ite (= x!0 20052) 20051
  (ite (= x!0 16750) 16750
  (ite (= x!0 16751) 16751
  (ite (= x!0 16752) 16752
  (ite (= x!0 2300) 2300
  (ite (= x!0 2301) 2300
  (ite (= x!0 2302) 2302
  (ite (= x!0 1) 1
  (ite (= x!0 0) 1
  (ite (= x!0 2) 4
  (ite (= x!0 4) 5
    21650))))))))))))))))))))))))))))))))
(define-fun list ((x!0 Int)) Bool
  (ite (= x!0 23851) false
  (ite (= x!0 23852) false
  (ite (= x!0 1000) false
  (ite (= x!0 8250) false
  (ite (= x!0 8252) false
  (ite (= x!0 20051) false
  (ite (= x!0 20052) false
  (ite (= x!0 16750) false
  (ite (= x!0 16751) false
  (ite (= x!0 2300) false
  (ite (= x!0 2301) false
  (ite (= x!0 2) false
  (ite (= x!0 4) false
    true))))))))))))))
(define-fun lsegy ((x!0 Int)) Bool
  (ite (= x!0 20552) false
  (ite (= x!0 23850) false
  (ite (= x!0 1001) false
  (ite (= x!0 1002) false
  (ite (= x!0 21452) false
  (ite (= x!0 17301) false
  (ite (= x!0 8251) false
  (ite (= x!0 8252) false
  (ite (= x!0 20050) false
  (ite (= x!0 21650) false
  (ite (= x!0 21651) false
  (ite (= x!0 16751) false
  (ite (= x!0 16752) false
  (ite (= x!0 2302) false
  (ite (= x!0 1) false
    true))))))))))))))))
(define-fun list_p ((x!0 Int)) Bool
  (ite (= x!0 20550) false
  (ite (= x!0 20551) false
  (ite (= x!0 23851) false
  (ite (= x!0 23852) false
  (ite (= x!0 8250) false
  (ite (= x!0 8252) false
  (ite (= x!0 20051) false
  (ite (= x!0 20052) false
  (ite (= x!0 16750) false
  (ite (= x!0 16751) false
  (ite (= x!0 0) false
  (ite (= x!0 2) false
  (ite (= x!0 4) false
    true))))))))))))))
(define-fun next_p ((x!0 Int)) Int
  (ite (= x!0 20550) 20551
  (ite (= x!0 20551) 20551
  (ite (= x!0 20552) 20552
  (ite (= x!0 23850) 23850
  (ite (= x!0 23851) 23852
  (ite (= x!0 23852) 23852
  (ite (= x!0 21450) 21451
  (ite (= x!0 21451) 21452
  (ite (= x!0 21452) 21452
  (ite (= x!0 17300) 17301
  (ite (= x!0 17301) 17301
  (ite (= x!0 17302) 17300
  (ite (= x!0 8250) 8250
  (ite (= x!0 8251) 8251
  (ite (= x!0 8252) 8252
  (ite (= x!0 20050) 20050
  (ite (= x!0 20051) 20051
  (ite (= x!0 20052) 20051
  (ite (= x!0 21650) 21650
  (ite (= x!0 21651) 21650
  (ite (= x!0 21652) 21650
  (ite (= x!0 16750) 16750
  (ite (= x!0 16751) 16751
  (ite (= x!0 16752) 16752
  (ite (= x!0 2300) 2302
  (ite (= x!0 2301) 2300
  (ite (= x!0 2302) 2302
  (ite (= x!0 1) 1
  (ite (= x!0 0) 3
  (ite (= x!0 2) 4
  (ite (= x!0 4) 5
    1001))))))))))))))))))))))))))))))))
(define-fun lsegy_p ((x!0 Int)) Bool
  (ite (= x!0 20552) false
  (ite (= x!0 23850) false
  (ite (= x!0 1001) false
  (ite (= x!0 1002) false
  (ite (= x!0 21452) false
  (ite (= x!0 17301) false
  (ite (= x!0 8251) false
  (ite (= x!0 8252) false
  (ite (= x!0 20050) false
  (ite (= x!0 21650) false
  (ite (= x!0 21651) false
  (ite (= x!0 16751) false
  (ite (= x!0 16752) false
  (ite (= x!0 2302) false
  (ite (= x!0 1) false
  (ite (= x!0 2) false
  (ite (= x!0 4) false
    true))))))))))))))))))

;; TODO: this should be generated from the problem parameters
;; lemma to synthesize
(synth-fun lemma ((x Int) (nil Int) (y Int)) Bool
           ((Start Bool) (Rec Bool) (B Bool) (I Int))

           ((Start Bool
                  ((=> Rec B)))
           (Rec Bool
                  ((list I) (lsegy I) (list_p I) (lsegy_p I)))
           (B Bool
                  ((=> B B)
                   (and B B)
                   (or B B)
                   (not B)
                   (list I) (lsegy I) (list_p I) (lsegy_p I)))
            (I Int (x nil y
                   (next I))))
)

;; constraints from false model
(constraint (or (not (lemma 1 1 0))
(not (lemma 0 1 0))
(not (lemma 2 1 0))
(not (lemma 4 1 0))
))

;; constraints from true models
(constraint (or (lemma 20550 20552 20551)
(lemma 20551 20552 20551)
(lemma 20552 20552 20551)
))
(constraint (or (lemma 23850 23850 23852)
(lemma 23851 23850 23852)
(lemma 23852 23850 23852)
))
(constraint (or (lemma 1000 1001 1000)
(lemma 1001 1001 1000)
(lemma 1002 1001 1000)
))
(constraint (or (lemma 21450 21452 21451)
(lemma 21451 21452 21451)
(lemma 21452 21452 21451)
))
(constraint (or (lemma 17300 17301 17300)
(lemma 17301 17301 17300)
(lemma 17302 17301 17300)
))
(constraint (or (lemma 8250 8251 8250)
(lemma 8251 8251 8250)
(lemma 8252 8251 8250)
))
(constraint (or (lemma 20050 20050 20051)
(lemma 20051 20050 20051)
(lemma 20052 20050 20051)
))
(constraint (or (lemma 21650 21650 21652)
(lemma 21651 21650 21652)
(lemma 21652 21650 21652)
))
(constraint (or (lemma 16750 16752 16750)
(lemma 16751 16752 16750)
(lemma 16752 16752 16750)
))
(constraint (or (lemma 2300 2302 2300)
(lemma 2301 2302 2300)
(lemma 2302 2302 2300)
))

(check-synth)